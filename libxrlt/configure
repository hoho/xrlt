#!/usr/bin/env python
import optparse
import os
import pprint
import re
import shlex
import subprocess
import sys

CC = os.environ.get('CC', 'cc')

root_dir = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(root_dir, 'deps', 'gyp', 'pylib'))
from gyp.common import GetFlavor
import gyp

# parse our options
parser = optparse.OptionParser()

parser.add_option('--debug',
    action='store_true',
    dest='debug',
    help='Also build debug build')

parser.add_option('--prefix',
    action='store',
    dest='prefix',
    help='Select the install prefix (defaults to /usr/local)')

parser.add_option('--gdb',
    action='store_true',
    dest='gdb',
    help='add gdb support')

parser.add_option('--dest-cpu',
    action='store',
    dest='dest_cpu',
    help='CPU architecture to build for. Valid values are: arm, ia32, x64')

parser.add_option('--dest-os',
    action='store',
    dest='dest_os',
    help='Operating system to build for. Valid values are: '
         'win, mac, solaris, freebsd, openbsd, linux')

parser.add_option('--with-arm-float-abi',
    action='store',
    dest='arm_float_abi',
    help='Specifies which floating-point ABI to use. Valid values are: '
         'soft, softfp, hard')

parser.add_option('--ninja',
    action='store_true',
    dest='use_ninja',
    help='Generate files for the ninja build system')

# Using --unsafe-optimizations voids your warranty.
parser.add_option('--unsafe-optimizations',
    action='store_true',
    dest='unsafe_optimizations',
    help=optparse.SUPPRESS_HELP)

parser.add_option('--xcode',
    action='store_true',
    dest='use_xcode',
    help='Generate build files for use with xcode')

parser.add_option('--static',
    action='store_true',
    dest='static',
    help='Build static library')


parser.add_option('--without-js',
    action='store_true',
    dest='without_js',
    help='Build without V8 javascript engine')


parser.add_option('--skip-deps-configure',
    action='store_true',
    dest='skip_deps_configure',
    help='Do not configure libxml2, libxslt and yajl')


(options, args) = parser.parse_args()


def b(value):
  """Returns the string 'true' if value is truthy, 'false' otherwise."""
  if value:
    return 'true'
  else:
    return 'false'


def pkg_config(pkg):
  cmd = os.popen('pkg-config --libs %s' % pkg, 'r')
  libs = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  cmd = os.popen('pkg-config --cflags %s' % pkg, 'r')
  cflags = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  return (libs, cflags)


def cc_macros():
  """Checks predefined macros using the CC command."""

  try:
    p = subprocess.Popen(shlex.split(CC) + ['-dM', '-E', '-'],
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
  except OSError:
    print '''configure error: No acceptable C compiler found!

        Please make sure you have a C compiler installed on your system and/or
        consider adjusting the CC environment variable if you installed
        it in a non-standard prefix.
        '''
    sys.exit()

  p.stdin.write('\n')
  out = p.communicate()[0]

  out = str(out).split('\n')

  k = {}
  for line in out:
    lst = shlex.split(line)
    if len(lst) > 2:
      key = lst[1]
      val = lst[2]
      k[key] = val
  return k


def is_arch_armv7():
  """Check for ARMv7 instructions"""
  cc_macros_cache = cc_macros()
  return ('__ARM_ARCH_7__' in cc_macros_cache or
          '__ARM_ARCH_7A__' in cc_macros_cache or
          '__ARM_ARCH_7R__' in cc_macros_cache or
          '__ARM_ARCH_7M__' in cc_macros_cache)


def is_arm_neon():
  """Check for ARM NEON support"""
  return '__ARM_NEON__' in cc_macros()


def arm_hard_float_abi():
  """Check for hardfloat or softfloat eabi on ARM"""
  # GCC versions 4.6 and above define __ARM_PCS or __ARM_PCS_VFP to specify
  # the Floating Point ABI used (PCS stands for Procedure Call Standard).
  # We use these as well as a couple of other defines to statically determine
  # what FP ABI used.
  # GCC versions 4.4 and below don't support hard-fp.
  # GCC versions 4.5 may support hard-fp without defining __ARM_PCS or
  # __ARM_PCS_VFP.

  if compiler_version() >= (4, 6, 0):
    return '__ARM_PCS_VFP' in cc_macros()
  elif compiler_version() < (4, 5, 0):
    return False
  elif '__ARM_PCS_VFP' in cc_macros():
    return True
  elif ('__ARM_PCS' in cc_macros() or
        '__SOFTFP' in cc_macros() or
        not '__VFP_FP__' in cc_macros()):
    return False
  else:
    print '''configure error: Your version of GCC does not report
      the Floating-Point ABI to compile for your hardware

      Please manually specify which floating-point ABI to use with the
      --with-arm-float-abi option.
      '''
    sys.exit()


def host_arch_cc():
  """Host architecture check using the CC command."""

  k = cc_macros()

  matchup = {
    '__x86_64__'  : 'x64',
    '__i386__'    : 'ia32',
    '__arm__'     : 'arm',
    '__mips__'    : 'mips',
  }

  rtn = 'ia32' # default

  for i in matchup:
    if i in k and k[i] != '0':
      rtn = matchup[i]
      break

  return rtn


def host_arch_win():
  """Host architecture check using environ vars (better way to do this?)"""

  arch = os.environ.get('PROCESSOR_ARCHITECTURE', 'x86')

  matchup = {
    'AMD64'  : 'x64',
    'x86'    : 'ia32',
    'arm'    : 'arm',
    'mips'   : 'mips',
  }

  return matchup.get(arch, 'ia32')


def compiler_version():
  try:
    proc = subprocess.Popen(shlex.split(CC) + ['--version'], stdout=subprocess.PIPE)
  except WindowsError:
    return (0, False)

  is_clang = 'clang' in proc.communicate()[0].split('\n')[0]

  proc = subprocess.Popen(shlex.split(CC) + ['-dumpversion'], stdout=subprocess.PIPE)
  version = tuple(map(int, proc.communicate()[0].split('.')))

  return (version, is_clang)


def configure_arm(o):
  # V8 on ARM requires that armv7 is set. CPU Model detected by
  # the presence of __ARM_ARCH_7__ and the like defines in compiler
  if options.arm_float_abi:
    hard_float = options.arm_float_abi == 'hard'
  else:
    hard_float = arm_hard_float_abi()

  armv7 = is_arch_armv7()
  # CHECKME VFPv3 implies ARMv7+ but is the reverse true as well?
  fpu = 'vfpv3' if armv7 else 'vfpv2'

  o['variables']['armv7'] = int(armv7)
  o['variables']['arm_fpu'] = fpu
  o['variables']['arm_neon'] = int(is_arm_neon())


def configure_libxrlt(o):
  o['default_configuration'] = 'Debug' if options.debug else 'Release'
  host_arch = host_arch_win() if os.name == 'nt' else host_arch_cc()
  target_arch = options.dest_cpu or host_arch
  o['variables']['host_arch'] = host_arch
  o['variables']['target_arch'] = target_arch
  o['variables']['library'] = '%s_library' % \
                              ('static' if options.static else 'shared')
  o['variables']['xrlt_js'] = 0 if options.without_js else 1

  if target_arch == 'arm':
    configure_arm(o)

  cc_version, is_clang = compiler_version()
  o['variables']['clang'] = 1 if is_clang else 0

  if not is_clang and cc_version != 0:
    o['variables']['gcc_version'] = 10 * cc_version[0] + cc_version[1]

  # clang has always supported -fvisibility=hidden, right?
  if not is_clang and cc_version < (4,0,0):
    o['variables']['visibility'] = ''


def configure_libxml(o):
  if options.skip_deps_configure:
    return

  print 'Configuring libxml2...'
  p = subprocess.Popen(['./autogen.sh', '--without-iconv', '--without-ftp',
                        '--without-http', '--disable-shared',
                        '--without-python', '--without-zlib', 'CFLAGS=-fPIC'],
                       cwd='deps/libxml')
  rc = p.wait()
  if rc != 0:
    sys.exit(rc)


def configure_libxslt(o):
  if options.skip_deps_configure:
    return

  print 'Configuring libxslt...'
  p = subprocess.Popen(['./autogen.sh', '--with-libxml-src=../libxml',
                        '--disable-shared', '--without-python',
                        'CFLAGS=-fPIC'],
                       cwd='deps/libxslt')
  rc = p.wait()
  if rc != 0:
    sys.exit(rc)


def configure_yajl(o):
  o['variables']['yajl_version'] = '2.1.0'

  if options.skip_deps_configure:
    return

  print 'Configuring yajl...'
  p = subprocess.Popen('./configure',
                       cwd='deps/yajl')
  rc = p.wait()
  if rc != 0:
    sys.exit(rc)


def configure_v8(o):
  o['variables']['v8_enable_gdbjit'] = 1 if options.gdb else 0
  o['variables']['v8_no_strict_aliasing'] = 1  # Work around compiler bugs.
  o['variables']['v8_optimized_debug'] = 0  # Compile with -O0 in debug builds.
  o['variables']['v8_random_seed'] = 0  # Use a random seed for hash tables.
  o['variables']['v8_use_snapshot'] = 'true'
  o['variables']['component'] = 'static_library'


def configure_winsdk(o):
  if flavor != 'win':
    return

  winsdk_dir = os.environ.get('WindowsSdkDir')

  if winsdk_dir and os.path.isfile(winsdk_dir + '\\bin\\ctrpp.exe'):
    print 'Found ctrpp in WinSDK--will build generated files into tools/msvs/genfiles.'
    o['variables']['has_winsdk'] = 'true'
    return

  print 'ctrpp not found in WinSDK path--using pre-gen files from tools/msvs/genfiles.'


def configure_icu(o):
  o['variables']['v8_enable_i18n_support'] = 0


# determine the 'flavor' (operating system) we're building for,
# leveraging gyp's GetFlavor function
flavor_params = {};
if (options.dest_os):
  flavor_params['flavor'] = options.dest_os;
flavor = GetFlavor(flavor_params);

output = {
  'variables': {'python': sys.executable},
  'include_dirs': [],
  'libraries': ['-lpthread'],
  'defines': [],
  'cflags': ['-fPIC'],
}

configure_libxrlt(output)
configure_libxml(output)
configure_libxslt(output)
configure_yajl(output)
configure_v8(output)
configure_winsdk(output)
configure_icu(output)

# variables should be a root level element,
# move everything else to target_defaults
variables = output['variables']
del output['variables']
output = {
  'variables': variables,
  'target_defaults': output
}
pprint.pprint(output, indent=2)

def write(filename, data):
  filename = os.path.join(root_dir, filename)
  print 'creating ', filename
  f = open(filename, 'w+')
  f.write(data)

write('config.gypi', '# Do not edit. Generated by the configure script.\n' +
  pprint.pformat(output, indent=2) + '\n')

config = {
  'BUILDTYPE': 'Debug' if options.debug else 'Release',
  'USE_NINJA': str(int(options.use_ninja or 0)),
  'USE_XCODE': str(int(options.use_xcode or 0)),
  'PYTHON': sys.executable,
}
config = '\n'.join(map('='.join, config.iteritems())) + '\n'

write('config.mk',
      '# Do not edit. Generated by the configure script.\n' + config)

def run_gyp(args):
  rc = gyp.main(args)
  if rc != 0:
    print 'Error running GYP'
    sys.exit(rc)

abs_root_dir = os.path.abspath(root_dir)
output_dir = os.path.join(os.path.abspath(root_dir), 'out')

if options.use_ninja:
  gyp_args = ['-f', 'ninja-' + flavor]
elif options.use_xcode:
  gyp_args = ['-f', 'xcode']
elif flavor == 'win':
  gyp_args = ['-f', 'msvs', '-G', 'msvs_version=auto']
else:
  gyp_args = ['-f', 'make-' + flavor]

# GYP bug.
# On msvs it will crash if it gets an absolute path.
# On Mac/make it will crash if it doesn't get an absolute path.
if sys.platform == 'win32':
  config_gyp = os.path.join(root_dir, 'config.gypi')
  main_gyp = os.path.join(root_dir, 'libxrlt.gyp')
else:
  config_gyp = os.path.join(abs_root_dir, 'config.gypi')
  main_gyp = os.path.join(abs_root_dir, 'libxrlt.gyp')

gyp_args.extend([
    '-I', config_gyp,
    main_gyp,
    '--depth=' + root_dir,
])

# There's a bug with windows which doesn't allow this feature.
if sys.platform != 'win32' and 'ninja' not in gyp_args:
  args.extend([
    # Tell gyp to write the Makefiles into output_dir
    '--generator-output', output_dir,
    # Tell make to write its output into the same dir
    '-Goutput_dir=' + output_dir
  ])

run_gyp(gyp_args)

if options.use_ninja and sys.platform != 'win32':
  print """
-----
Run `ninja -C out/Release` to build project.
"""
